name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  GO_VERSION: '1.22'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  security-events: write
  id-token: write
  packages: write
  attestations: write

jobs:
  # Release Build Job
  release-build:
    name: Release Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: latest
        install-only: true

    - name: Run GoReleaser
      run: goreleaser release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate SBOM for release
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        syft packages . -o spdx-json=release-sbom.spdx.json
        syft packages . -o cyclonedx-json=release-sbom.cyclonedx.json

    - name: Upload release SBOM
      uses: actions/upload-artifact@v4
      with:
        name: release-sbom-${{ github.ref_name }}
        path: |
          release-sbom.spdx.json
          release-sbom.cyclonedx.json

  # Release Container Build
  release-container:
    name: Release Container Build
    runs-on: ubuntu-latest
    needs: [release-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push release images
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: true
        sbom: true

    - name: Install Cosign
      uses: sigstore/cosign-installer@v3

    - name: Sign release images
      run: |
        echo "${{ steps.meta.outputs.tags }}" | while read tag; do
          cosign sign --yes "${tag}@${{ steps.build.outputs.digest }}"
        done

    - name: Generate release attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true

    - name: Verify signatures
      run: |
        echo "${{ steps.meta.outputs.tags }}" | while read tag; do
          cosign verify "${tag}@${{ steps.build.outputs.digest }}" --certificate-identity-regexp=".*" --certificate-oidc-issuer-regexp=".*"
        done