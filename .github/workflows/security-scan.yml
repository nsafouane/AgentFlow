name: Security Scan

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'go.mod'
      - 'go.sum'
      - '**/*.go'

env:
  GO_VERSION: '1.22'

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  # Comprehensive Security Scan
  security-scan:
    name: Comprehensive Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    # Static Application Security Testing (SAST)
    - name: Run gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif -severity high ./...'
      continue-on-error: true

    - name: Upload gosec SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif
      if: always()

    # CodeQL Analysis
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: go

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    # Secret Scanning
    - name: Run gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

    # Dependency Vulnerability Scanning
    - name: Run OSV Scanner
      uses: google/osv-scanner-action@v1
      with:
        scan-args: |-
          -r
          --skip-git
          --format sarif
          --output osv-results.sarif
          .
      continue-on-error: true

    - name: Upload OSV Scanner SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: osv-results.sarif
      if: always()

    # Go Vulnerability Check
    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck -json ./... > govulncheck-results.json
      continue-on-error: true

    - name: Upload govulncheck results
      uses: actions/upload-artifact@v4
      with:
        name: govulncheck-results
        path: govulncheck-results.json
      if: always()

    # Trivy Security Scanner
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'HIGH,CRITICAL'

    - name: Upload Trivy SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif
      if: always()

    # Semgrep SAST
    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/golang
        generateSarif: "1"
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

    # License Compliance
    - name: FOSSA Scan
      uses: fossa-contrib/fossa-action@v3
      with:
        api-key: ${{ secrets.FOSSA_API_KEY }}
        run-tests: true
      continue-on-error: true

  # Container Security Scan
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build test image
      run: |
        docker build -t test-image:latest .

    - name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'test-image:latest'
        format: 'sarif'
        output: 'trivy-container.sarif'
        severity: 'HIGH,CRITICAL'

    - name: Upload Trivy container SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-container.sarif

    - name: Run Grype container scan
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
        grype test-image:latest --fail-on high --output sarif > grype-container.sarif
      continue-on-error: true

    - name: Upload Grype container SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: grype-container.sarif
      if: always()

  # Security Report
  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [security-scan, container-security]
    if: always()
    
    steps:
    - name: Generate Security Report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "Date: $(date)" >> security-report.md
        echo "Commit: ${{ github.sha }}" >> security-report.md
        echo "" >> security-report.md
        echo "## Scan Results" >> security-report.md
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> security-report.md
        echo "- Container Security: ${{ needs.container-security.result }}" >> security-report.md
        echo "" >> security-report.md
        echo "Check the Security tab for detailed findings." >> security-report.md

    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: security-report-${{ github.sha }}
        path: security-report.md