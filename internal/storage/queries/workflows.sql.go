// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: workflows.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWorkflow = `-- name: CreateWorkflow :one
INSERT INTO workflows (tenant_id, name, version, config_yaml, planner_type, template_version_constraint)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, tenant_id, name, version, config_yaml, planner_type, template_version_constraint, created_at, updated_at
`

type CreateWorkflowParams struct {
	TenantID                  pgtype.UUID `json:"tenant_id"`
	Name                      string      `json:"name"`
	Version                   string      `json:"version"`
	ConfigYaml                string      `json:"config_yaml"`
	PlannerType               string      `json:"planner_type"`
	TemplateVersionConstraint pgtype.Text `json:"template_version_constraint"`
}

func (q *Queries) CreateWorkflow(ctx context.Context, arg CreateWorkflowParams) (Workflow, error) {
	row := q.db.QueryRow(ctx, createWorkflow,
		arg.TenantID,
		arg.Name,
		arg.Version,
		arg.ConfigYaml,
		arg.PlannerType,
		arg.TemplateVersionConstraint,
	)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Version,
		&i.ConfigYaml,
		&i.PlannerType,
		&i.TemplateVersionConstraint,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWorkflow = `-- name: DeleteWorkflow :exec
DELETE FROM workflows
WHERE id = $1 AND tenant_id = $2
`

type DeleteWorkflowParams struct {
	ID       pgtype.UUID `json:"id"`
	TenantID pgtype.UUID `json:"tenant_id"`
}

func (q *Queries) DeleteWorkflow(ctx context.Context, arg DeleteWorkflowParams) error {
	_, err := q.db.Exec(ctx, deleteWorkflow, arg.ID, arg.TenantID)
	return err
}

const getWorkflow = `-- name: GetWorkflow :one
SELECT id, tenant_id, name, version, config_yaml, planner_type, template_version_constraint, created_at, updated_at FROM workflows
WHERE id = $1 AND tenant_id = $2
`

type GetWorkflowParams struct {
	ID       pgtype.UUID `json:"id"`
	TenantID pgtype.UUID `json:"tenant_id"`
}

func (q *Queries) GetWorkflow(ctx context.Context, arg GetWorkflowParams) (Workflow, error) {
	row := q.db.QueryRow(ctx, getWorkflow, arg.ID, arg.TenantID)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Version,
		&i.ConfigYaml,
		&i.PlannerType,
		&i.TemplateVersionConstraint,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWorkflowByNameVersion = `-- name: GetWorkflowByNameVersion :one
SELECT id, tenant_id, name, version, config_yaml, planner_type, template_version_constraint, created_at, updated_at FROM workflows
WHERE tenant_id = $1 AND name = $2 AND version = $3
`

type GetWorkflowByNameVersionParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	Name     string      `json:"name"`
	Version  string      `json:"version"`
}

func (q *Queries) GetWorkflowByNameVersion(ctx context.Context, arg GetWorkflowByNameVersionParams) (Workflow, error) {
	row := q.db.QueryRow(ctx, getWorkflowByNameVersion, arg.TenantID, arg.Name, arg.Version)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Version,
		&i.ConfigYaml,
		&i.PlannerType,
		&i.TemplateVersionConstraint,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listWorkflowsByPlanner = `-- name: ListWorkflowsByPlanner :many
SELECT id, tenant_id, name, version, config_yaml, planner_type, template_version_constraint, created_at, updated_at FROM workflows
WHERE tenant_id = $1 AND planner_type = $2
ORDER BY created_at DESC
`

type ListWorkflowsByPlannerParams struct {
	TenantID    pgtype.UUID `json:"tenant_id"`
	PlannerType string      `json:"planner_type"`
}

func (q *Queries) ListWorkflowsByPlanner(ctx context.Context, arg ListWorkflowsByPlannerParams) ([]Workflow, error) {
	rows, err := q.db.Query(ctx, listWorkflowsByPlanner, arg.TenantID, arg.PlannerType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Workflow{}
	for rows.Next() {
		var i Workflow
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Name,
			&i.Version,
			&i.ConfigYaml,
			&i.PlannerType,
			&i.TemplateVersionConstraint,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWorkflowsByTenant = `-- name: ListWorkflowsByTenant :many
SELECT id, tenant_id, name, version, config_yaml, planner_type, template_version_constraint, created_at, updated_at FROM workflows
WHERE tenant_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListWorkflowsByTenant(ctx context.Context, tenantID pgtype.UUID) ([]Workflow, error) {
	rows, err := q.db.Query(ctx, listWorkflowsByTenant, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Workflow{}
	for rows.Next() {
		var i Workflow
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Name,
			&i.Version,
			&i.ConfigYaml,
			&i.PlannerType,
			&i.TemplateVersionConstraint,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkflow = `-- name: UpdateWorkflow :one
UPDATE workflows
SET name = $3, version = $4, config_yaml = $5, planner_type = $6, template_version_constraint = $7, updated_at = NOW()
WHERE id = $1 AND tenant_id = $2
RETURNING id, tenant_id, name, version, config_yaml, planner_type, template_version_constraint, created_at, updated_at
`

type UpdateWorkflowParams struct {
	ID                        pgtype.UUID `json:"id"`
	TenantID                  pgtype.UUID `json:"tenant_id"`
	Name                      string      `json:"name"`
	Version                   string      `json:"version"`
	ConfigYaml                string      `json:"config_yaml"`
	PlannerType               string      `json:"planner_type"`
	TemplateVersionConstraint pgtype.Text `json:"template_version_constraint"`
}

func (q *Queries) UpdateWorkflow(ctx context.Context, arg UpdateWorkflowParams) (Workflow, error) {
	row := q.db.QueryRow(ctx, updateWorkflow,
		arg.ID,
		arg.TenantID,
		arg.Name,
		arg.Version,
		arg.ConfigYaml,
		arg.PlannerType,
		arg.TemplateVersionConstraint,
	)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Version,
		&i.ConfigYaml,
		&i.PlannerType,
		&i.TemplateVersionConstraint,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
