// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: migration_baseline.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMigrationBaseline = `-- name: CreateMigrationBaseline :one
INSERT INTO migration_baseline (description)
VALUES ($1)
RETURNING id, created_at, description
`

func (q *Queries) CreateMigrationBaseline(ctx context.Context, description string) (MigrationBaseline, error) {
	row := q.db.QueryRow(ctx, createMigrationBaseline, description)
	var i MigrationBaseline
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Description)
	return i, err
}

const getMigrationBaseline = `-- name: GetMigrationBaseline :one
SELECT id, created_at, description
FROM migration_baseline
WHERE id = $1
`

func (q *Queries) GetMigrationBaseline(ctx context.Context, id pgtype.UUID) (MigrationBaseline, error) {
	row := q.db.QueryRow(ctx, getMigrationBaseline, id)
	var i MigrationBaseline
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Description)
	return i, err
}

const listMigrationBaselines = `-- name: ListMigrationBaselines :many
SELECT id, created_at, description
FROM migration_baseline
ORDER BY created_at DESC
`

func (q *Queries) ListMigrationBaselines(ctx context.Context) ([]MigrationBaseline, error) {
	rows, err := q.db.Query(ctx, listMigrationBaselines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MigrationBaseline{}
	for rows.Next() {
		var i MigrationBaseline
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
