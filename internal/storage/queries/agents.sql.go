// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: agents.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAgent = `-- name: CreateAgent :one
INSERT INTO agents (tenant_id, name, type, role, config_json, policies_json)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, tenant_id, name, type, role, config_json, policies_json, created_at, updated_at
`

type CreateAgentParams struct {
	TenantID     pgtype.UUID `json:"tenant_id"`
	Name         string      `json:"name"`
	Type         string      `json:"type"`
	Role         pgtype.Text `json:"role"`
	ConfigJson   []byte      `json:"config_json"`
	PoliciesJson []byte      `json:"policies_json"`
}

func (q *Queries) CreateAgent(ctx context.Context, arg CreateAgentParams) (Agent, error) {
	row := q.db.QueryRow(ctx, createAgent,
		arg.TenantID,
		arg.Name,
		arg.Type,
		arg.Role,
		arg.ConfigJson,
		arg.PoliciesJson,
	)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Type,
		&i.Role,
		&i.ConfigJson,
		&i.PoliciesJson,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAgent = `-- name: DeleteAgent :exec
DELETE FROM agents
WHERE id = $1 AND tenant_id = $2
`

type DeleteAgentParams struct {
	ID       pgtype.UUID `json:"id"`
	TenantID pgtype.UUID `json:"tenant_id"`
}

func (q *Queries) DeleteAgent(ctx context.Context, arg DeleteAgentParams) error {
	_, err := q.db.Exec(ctx, deleteAgent, arg.ID, arg.TenantID)
	return err
}

const getAgent = `-- name: GetAgent :one
SELECT id, tenant_id, name, type, role, config_json, policies_json, created_at, updated_at FROM agents
WHERE id = $1 AND tenant_id = $2
`

type GetAgentParams struct {
	ID       pgtype.UUID `json:"id"`
	TenantID pgtype.UUID `json:"tenant_id"`
}

func (q *Queries) GetAgent(ctx context.Context, arg GetAgentParams) (Agent, error) {
	row := q.db.QueryRow(ctx, getAgent, arg.ID, arg.TenantID)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Type,
		&i.Role,
		&i.ConfigJson,
		&i.PoliciesJson,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAgentByName = `-- name: GetAgentByName :one
SELECT id, tenant_id, name, type, role, config_json, policies_json, created_at, updated_at FROM agents
WHERE tenant_id = $1 AND name = $2
`

type GetAgentByNameParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	Name     string      `json:"name"`
}

func (q *Queries) GetAgentByName(ctx context.Context, arg GetAgentByNameParams) (Agent, error) {
	row := q.db.QueryRow(ctx, getAgentByName, arg.TenantID, arg.Name)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Type,
		&i.Role,
		&i.ConfigJson,
		&i.PoliciesJson,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAgentsByTenant = `-- name: ListAgentsByTenant :many
SELECT id, tenant_id, name, type, role, config_json, policies_json, created_at, updated_at FROM agents
WHERE tenant_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListAgentsByTenant(ctx context.Context, tenantID pgtype.UUID) ([]Agent, error) {
	rows, err := q.db.Query(ctx, listAgentsByTenant, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Agent{}
	for rows.Next() {
		var i Agent
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Name,
			&i.Type,
			&i.Role,
			&i.ConfigJson,
			&i.PoliciesJson,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAgentsByType = `-- name: ListAgentsByType :many
SELECT id, tenant_id, name, type, role, config_json, policies_json, created_at, updated_at FROM agents
WHERE tenant_id = $1 AND type = $2
ORDER BY created_at DESC
`

type ListAgentsByTypeParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	Type     string      `json:"type"`
}

func (q *Queries) ListAgentsByType(ctx context.Context, arg ListAgentsByTypeParams) ([]Agent, error) {
	rows, err := q.db.Query(ctx, listAgentsByType, arg.TenantID, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Agent{}
	for rows.Next() {
		var i Agent
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Name,
			&i.Type,
			&i.Role,
			&i.ConfigJson,
			&i.PoliciesJson,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgent = `-- name: UpdateAgent :one
UPDATE agents
SET name = $3, type = $4, role = $5, config_json = $6, policies_json = $7, updated_at = NOW()
WHERE id = $1 AND tenant_id = $2
RETURNING id, tenant_id, name, type, role, config_json, policies_json, created_at, updated_at
`

type UpdateAgentParams struct {
	ID           pgtype.UUID `json:"id"`
	TenantID     pgtype.UUID `json:"tenant_id"`
	Name         string      `json:"name"`
	Type         string      `json:"type"`
	Role         pgtype.Text `json:"role"`
	ConfigJson   []byte      `json:"config_json"`
	PoliciesJson []byte      `json:"policies_json"`
}

func (q *Queries) UpdateAgent(ctx context.Context, arg UpdateAgentParams) (Agent, error) {
	row := q.db.QueryRow(ctx, updateAgent,
		arg.ID,
		arg.TenantID,
		arg.Name,
		arg.Type,
		arg.Role,
		arg.ConfigJson,
		arg.PoliciesJson,
	)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Name,
		&i.Type,
		&i.Role,
		&i.ConfigJson,
		&i.PoliciesJson,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
