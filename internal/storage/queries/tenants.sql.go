// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tenants.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenants (name, tier, settings)
VALUES ($1, $2, $3)
RETURNING id, name, tier, settings, created_at, updated_at
`

type CreateTenantParams struct {
	Name     string `json:"name"`
	Tier     string `json:"tier"`
	Settings []byte `json:"settings"`
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, createTenant, arg.Name, arg.Tier, arg.Settings)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tier,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTenant = `-- name: DeleteTenant :exec
DELETE FROM tenants
WHERE id = $1
`

func (q *Queries) DeleteTenant(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTenant, id)
	return err
}

const getTenant = `-- name: GetTenant :one
SELECT id, name, tier, settings, created_at, updated_at FROM tenants
WHERE id = $1
`

func (q *Queries) GetTenant(ctx context.Context, id pgtype.UUID) (Tenant, error) {
	row := q.db.QueryRow(ctx, getTenant, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tier,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTenantByName = `-- name: GetTenantByName :one
SELECT id, name, tier, settings, created_at, updated_at FROM tenants
WHERE name = $1
`

func (q *Queries) GetTenantByName(ctx context.Context, name string) (Tenant, error) {
	row := q.db.QueryRow(ctx, getTenantByName, name)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tier,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTenants = `-- name: ListTenants :many
SELECT id, name, tier, settings, created_at, updated_at FROM tenants
ORDER BY created_at DESC
`

func (q *Queries) ListTenants(ctx context.Context) ([]Tenant, error) {
	rows, err := q.db.Query(ctx, listTenants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tenant{}
	for rows.Next() {
		var i Tenant
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Tier,
			&i.Settings,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTenant = `-- name: UpdateTenant :one
UPDATE tenants
SET name = $2, tier = $3, settings = $4, updated_at = NOW()
WHERE id = $1
RETURNING id, name, tier, settings, created_at, updated_at
`

type UpdateTenantParams struct {
	ID       pgtype.UUID `json:"id"`
	Name     string      `json:"name"`
	Tier     string      `json:"tier"`
	Settings []byte      `json:"settings"`
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, updateTenant,
		arg.ID,
		arg.Name,
		arg.Tier,
		arg.Settings,
	)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Tier,
		&i.Settings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
