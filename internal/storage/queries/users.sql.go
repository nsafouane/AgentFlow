// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (tenant_id, email, role, hashed_secret)
VALUES ($1, $2, $3, $4)
RETURNING id, tenant_id, email, role, hashed_secret, created_at, updated_at
`

type CreateUserParams struct {
	TenantID     pgtype.UUID `json:"tenant_id"`
	Email        string      `json:"email"`
	Role         string      `json:"role"`
	HashedSecret pgtype.Text `json:"hashed_secret"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.TenantID,
		arg.Email,
		arg.Role,
		arg.HashedSecret,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Email,
		&i.Role,
		&i.HashedSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1 AND tenant_id = $2
`

type DeleteUserParams struct {
	ID       pgtype.UUID `json:"id"`
	TenantID pgtype.UUID `json:"tenant_id"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.Exec(ctx, deleteUser, arg.ID, arg.TenantID)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, tenant_id, email, role, hashed_secret, created_at, updated_at FROM users
WHERE id = $1 AND tenant_id = $2
`

type GetUserParams struct {
	ID       pgtype.UUID `json:"id"`
	TenantID pgtype.UUID `json:"tenant_id"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRow(ctx, getUser, arg.ID, arg.TenantID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Email,
		&i.Role,
		&i.HashedSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, tenant_id, email, role, hashed_secret, created_at, updated_at FROM users
WHERE tenant_id = $1 AND email = $2
`

type GetUserByEmailParams struct {
	TenantID pgtype.UUID `json:"tenant_id"`
	Email    string      `json:"email"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, arg GetUserByEmailParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, arg.TenantID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Email,
		&i.Role,
		&i.HashedSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsersByTenant = `-- name: ListUsersByTenant :many
SELECT id, tenant_id, email, role, hashed_secret, created_at, updated_at FROM users
WHERE tenant_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListUsersByTenant(ctx context.Context, tenantID pgtype.UUID) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsersByTenant, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Email,
			&i.Role,
			&i.HashedSecret,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email = $3, role = $4, hashed_secret = $5, updated_at = NOW()
WHERE id = $1 AND tenant_id = $2
RETURNING id, tenant_id, email, role, hashed_secret, created_at, updated_at
`

type UpdateUserParams struct {
	ID           pgtype.UUID `json:"id"`
	TenantID     pgtype.UUID `json:"tenant_id"`
	Email        string      `json:"email"`
	Role         string      `json:"role"`
	HashedSecret pgtype.Text `json:"hashed_secret"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.TenantID,
		arg.Email,
		arg.Role,
		arg.HashedSecret,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Email,
		&i.Role,
		&i.HashedSecret,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
