# AgentFlow Taskfile
# Cross-platform task runner for AgentFlow
version: '3'

vars:
  BIN_DIR: bin
  GOOS: '{{OS}}'
  GOARCH: '{{ARCH}}'

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  build:
    desc: Build all AgentFlow components
    cmds:
      - echo "Building AgentFlow components..."
      - go build -o {{.BIN_DIR}}/control-plane{{exeExt}} ./cmd/control-plane
      - go build -o {{.BIN_DIR}}/worker{{exeExt}} ./cmd/worker
      - go build -o {{.BIN_DIR}}/af{{exeExt}} ./cmd/af
      - echo "Build complete"

  test:
    desc: Run all tests
    cmds:
      - echo "Running tests..."
      - go test ./...
      - task: test-modules

  test-modules:
    desc: Run tests for all modules
    cmds:
      - cd cmd/control-plane && go test ./...
      - cd cmd/worker && go test ./...
      - cd cmd/af && go test ./...
      - cd sdk/go && go test ./...

  lint:
    desc: Run golangci-lint on all modules
    cmds:
      - echo "Running linting..."
      - golangci-lint run ./...
      - task: lint-modules

  lint-modules:
    desc: Run linting for all modules
    cmds:
      - cd cmd/control-plane && golangci-lint run ./...
      - cd cmd/worker && golangci-lint run ./...
      - cd cmd/af && golangci-lint run ./...
      - cd sdk/go && golangci-lint run ./...

  deps:
    desc: Install/update dependencies
    cmds:
      - echo "Installing dependencies..."
      - go mod tidy
      - task: deps-modules
      - echo "Dependencies updated"

  deps-modules:
    desc: Update dependencies for all modules
    cmds:
      - cd cmd/control-plane && go mod tidy
      - cd cmd/worker && go mod tidy
      - cd cmd/af && go mod tidy
      - cd sdk/go && go mod tidy

  dev:
    desc: Start development environment
    cmds:
      - echo "Starting development environment..."
      - echo "Development environment setup complete"

  security-scan:
    desc: Run security scans
    cmds:
      - echo "Running security scans..."
      - echo "Security scanning will be implemented with gosec, osv-scanner, etc."

  containers:
    desc: Build multi-arch container images
    cmds:
      - echo "Building multi-arch containers..."
      - docker buildx build --platform linux/amd64,linux/arm64 -t agentflow/control-plane:latest -f cmd/control-plane/Dockerfile .
      - docker buildx build --platform linux/amd64,linux/arm64 -t agentflow/worker:latest -f cmd/worker/Dockerfile .
      - docker buildx build --platform linux/amd64,linux/arm64 -t agentflow/af:latest -f cmd/af/Dockerfile .
      - echo "Multi-arch container builds complete"

  containers-local:
    desc: Build container images for local platform
    cmds:
      - echo "Building containers for local platform..."
      - docker build -t agentflow/control-plane:latest -f cmd/control-plane/Dockerfile .
      - docker build -t agentflow/worker:latest -f cmd/worker/Dockerfile .
      - docker build -t agentflow/af:latest -f cmd/af/Dockerfile .
      - echo "Local container builds complete"

  containers-push:
    desc: Build and push container images
    vars:
      REGISTRY: '{{.REGISTRY | default "ghcr.io"}}'
      IMAGE_NAME: '{{.IMAGE_NAME | default "agentflow/agentflow"}}'
      TAG: '{{.TAG | default "latest"}}'
    cmds:
      - echo "Building and pushing multi-arch containers..."
      - docker buildx build --platform linux/amd64,linux/arm64 --push -t {{.REGISTRY}}/{{.IMAGE_NAME}}/control-plane:{{.TAG}} -f cmd/control-plane/Dockerfile .
      - docker buildx build --platform linux/amd64,linux/arm64 --push -t {{.REGISTRY}}/{{.IMAGE_NAME}}/worker:{{.TAG}} -f cmd/worker/Dockerfile .
      - docker buildx build --platform linux/amd64,linux/arm64 --push -t {{.REGISTRY}}/{{.IMAGE_NAME}}/af:{{.TAG}} -f cmd/af/Dockerfile .
      - echo "Multi-arch container push complete"

  test-containers:
    desc: Test container builds, signatures, and SBOM
    cmds:
      - echo "Testing container builds..."
      - |
        {{if eq OS "windows"}}
        powershell -ExecutionPolicy Bypass -File scripts/test-container-build.ps1
        {{else}}
        bash scripts/test-container-build.sh
        {{end}}

  clean:
    desc: Clean build artifacts
    cmds:
      - echo "Cleaning build artifacts..."
      - rm -rf {{.BIN_DIR}}/
      - go clean ./...
      - task: clean-modules
      - echo "Clean complete"

  clean-modules:
    desc: Clean all modules
    cmds:
      - cd cmd/control-plane && go clean ./...
      - cd cmd/worker && go clean ./...
      - cd cmd/af && go clean ./...
      - cd sdk/go && go clean ./...

  build-linux:
    desc: Build for Linux
    env:
      GOOS: linux
      GOARCH: amd64
    cmds:
      - go build -o {{.BIN_DIR}}/linux/control-plane ./cmd/control-plane
      - go build -o {{.BIN_DIR}}/linux/worker ./cmd/worker
      - go build -o {{.BIN_DIR}}/linux/af ./cmd/af

  build-windows:
    desc: Build for Windows
    env:
      GOOS: windows
      GOARCH: amd64
    cmds:
      - go build -o {{.BIN_DIR}}/windows/control-plane.exe ./cmd/control-plane
      - go build -o {{.BIN_DIR}}/windows/worker.exe ./cmd/worker
      - go build -o {{.BIN_DIR}}/windows/af.exe ./cmd/af

  build-all:
    desc: Build for all platforms
    cmds:
      - task: build-linux
      - task: build-windows

  validate:
    desc: Validate development environment
    cmds:
      - echo "Validating development environment..."
      - go version
      - echo "Environment validation complete"

  migrate-up:
    desc: Run database migrations up
    cmds:
      - echo "Running database migrations up..."
      - goose -dir migrations postgres "{{.DATABASE_URL}}" up

  migrate-down:
    desc: Rollback last database migration
    cmds:
      - echo "Rolling back last database migration..."
      - goose -dir migrations postgres "{{.DATABASE_URL}}" down

  migrate-status:
    desc: Show migration status
    cmds:
      - echo "Checking migration status..."
      - goose -dir migrations postgres "{{.DATABASE_URL}}" status

  migrate-create:
    desc: Create new migration
    cmds:
      - echo "Creating new migration: {{.NAME}}"
      - goose -dir migrations create {{.NAME}} sql

  sqlc-generate:
    desc: Generate type-safe Go code from SQL queries
    cmds:
      - echo "Generating type-safe queries with sqlc..."
      - sqlc generate